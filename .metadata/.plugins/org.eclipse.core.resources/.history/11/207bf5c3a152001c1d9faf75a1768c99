package login.StoreLogin;

import java.net.URI;
import java.security.Principal;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.provider.OAuth2Authentication;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import login.StoreLogin.service.JwtTokenUtil;
import login.StoreLogin.service.OrderService;

@SpringBootApplication
//Enables Spring Bootâ€™s auto-configuration mechanism, package scan, and registering extra beans in the
//context or import additional configuration classes
@EnableOAuth2Sso // Enables OAuth2 Single Sign On, will automatically use application.yml
					// properties for security
@RestController // Enabling REST functionality. With this, we can now expose our own endpoints
@CrossOrigin
public class LoginApp extends WebSecurityConfigurerAdapter {

	@Autowired
	OrderService orderService;
	
	@Autowired
	JwtTokenUtil jwtTokenUtil;
	
	String orderID="";

	public static void main(String[] args) {
		SpringApplication.run(LoginApp.class, args);
		
	}
	
	

	@Override
	protected void configure(HttpSecurity http) throws Exception {

		// Configuring Spring security access. For /login, /user, and /userinfo, we need
		// authentication.
		// Logout is enabled.
		// Adding csrf token support to this configurer.
		http.authorizeRequests().antMatchers("/h2/**").permitAll().antMatchers("/login**", "/user", "/userInfo")
				.authenticated().and().logout().logoutSuccessUrl("/").permitAll().and().csrf()
				.csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse());

	}

	@RequestMapping("/user")
	public Principal user(Principal principal) {
		// Principal holds the logged in user information.
		// Spring automatically populates this principal object after login.
		return principal;
	}

	@RequestMapping("/userInfo")
	public String userInfo(Principal principal) {
		final OAuth2Authentication oAuth2Authentication = (OAuth2Authentication) principal;
		final Authentication authentication = oAuth2Authentication.getUserAuthentication();
		// Manually getting the details from the authentication, and returning them as
		// String.
		return authentication.getDetails().toString();
	}

	@PostMapping(path = "/generateOrderToken", 
	        consumes = MediaType.APPLICATION_JSON_VALUE, 
	        produces = MediaType.APPLICATION_JSON_VALUE)
	public String generateOrderToken(@RequestBody OrderDTO orderDetails) {
		System.out.println("orderDetails=" + "," + orderDetails.getItemName()+ "User Name--> "+orderDetails.getUserName());

		int min=0;
		int max=1000000;
		int temp = (int)(Math.random()*(max-min+1)+min); 
		StringBuffer orderID = new StringBuffer();
		orderID.append(temp);
		String order = orderID.toString();
		setOrderID(order);
		orderDetails.setOrderId(order);
		System.out.println("Order Id generated -  "+orderID.toString());
		String token= orderService.generateOrderToken(orderDetails);

		System.out.println("Token generated sucussfully- " + token);
		
		return token;
//		
//		return ResponseEntity.status(HttpStatus.FOUND).
//				.location(URI.create("http://localhost:8090/fetchOrder/"+orderDetails.getOrderId())).build();
	}
	
	@PostMapping(path = "/placeOrder", 
	        consumes = MediaType.APPLICATION_JSON_VALUE, 
	        produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Void> placeOrder(@RequestBody OrderDTO orderDetails) {
		orderDetails.setOrderId(orderID.toString());
		System.out.println("placeOrder=" + orderID.toString() + "," + orderDetails.getItemName()+ "User Name--> "+orderDetails.getUserName());


		System.out.println("Redirecting to Order service for token validation");
		
		return ResponseEntity.status(HttpStatus.FOUND)
				.location(URI.create("http://localhost:8090/fetchOrder/"+orderDetails.getOrderId())).build();
	}
	 
	public void setOrderID(String orderID) {
		this.orderID = orderID;
				
	}
	

}
